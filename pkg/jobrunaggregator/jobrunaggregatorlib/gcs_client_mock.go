// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorlib (interfaces: CIGCSClient)

// Package jobrunaggregatorlib is a generated GoMock package.
package jobrunaggregatorlib

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jobrunaggregatorapi "github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorapi"
	logrus "github.com/sirupsen/logrus"
)

// MockCIGCSClient is a mock of CIGCSClient interface.
type MockCIGCSClient struct {
	ctrl     *gomock.Controller
	recorder *MockCIGCSClientMockRecorder
}

// MockCIGCSClientMockRecorder is the mock recorder for MockCIGCSClient.
type MockCIGCSClientMockRecorder struct {
	mock *MockCIGCSClient
}

// NewMockCIGCSClient creates a new mock instance.
func NewMockCIGCSClient(ctrl *gomock.Controller) *MockCIGCSClient {
	mock := &MockCIGCSClient{ctrl: ctrl}
	mock.recorder = &MockCIGCSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIGCSClient) EXPECT() *MockCIGCSClientMockRecorder {
	return m.recorder
}

// ReadJobRunFromGCS mocks base method.
func (m *MockCIGCSClient) ReadJobRunFromGCS(arg0 context.Context, arg1, arg2, arg3 string, arg4 logrus.FieldLogger) (jobrunaggregatorapi.JobRunInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobRunFromGCS", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(jobrunaggregatorapi.JobRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobRunFromGCS indicates an expected call of ReadJobRunFromGCS.
func (mr *MockCIGCSClientMockRecorder) ReadJobRunFromGCS(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobRunFromGCS", reflect.TypeOf((*MockCIGCSClient)(nil).ReadJobRunFromGCS), arg0, arg1, arg2, arg3, arg4)
}
