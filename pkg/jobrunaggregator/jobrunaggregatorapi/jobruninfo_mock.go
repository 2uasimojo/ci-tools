// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorapi (interfaces: JobRunInfo)

// Package jobrunaggregatorapi is a generated GoMock package.
package jobrunaggregatorapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	v1 "sigs.k8s.io/prow/pkg/apis/prowjobs/v1"

	junit "github.com/openshift/ci-tools/pkg/junit"
)

// MockJobRunInfo is a mock of JobRunInfo interface.
type MockJobRunInfo struct {
	ctrl     *gomock.Controller
	recorder *MockJobRunInfoMockRecorder
}

// MockJobRunInfoMockRecorder is the mock recorder for MockJobRunInfo.
type MockJobRunInfoMockRecorder struct {
	mock *MockJobRunInfo
}

// NewMockJobRunInfo creates a new mock instance.
func NewMockJobRunInfo(ctrl *gomock.Controller) *MockJobRunInfo {
	mock := &MockJobRunInfo{ctrl: ctrl}
	mock.recorder = &MockJobRunInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRunInfo) EXPECT() *MockJobRunInfoMockRecorder {
	return m.recorder
}

// AddGCSJunitPaths mocks base method.
func (m *MockJobRunInfo) AddGCSJunitPaths(arg0 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddGCSJunitPaths", varargs...)
}

// AddGCSJunitPaths indicates an expected call of AddGCSJunitPaths.
func (mr *MockJobRunInfoMockRecorder) AddGCSJunitPaths(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGCSJunitPaths", reflect.TypeOf((*MockJobRunInfo)(nil).AddGCSJunitPaths), arg0...)
}

// AddGCSProwJobFileNames mocks base method.
func (m *MockJobRunInfo) AddGCSProwJobFileNames(arg0 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddGCSProwJobFileNames", varargs...)
}

// AddGCSProwJobFileNames indicates an expected call of AddGCSProwJobFileNames.
func (mr *MockJobRunInfoMockRecorder) AddGCSProwJobFileNames(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGCSProwJobFileNames", reflect.TypeOf((*MockJobRunInfo)(nil).AddGCSProwJobFileNames), arg0...)
}

// ClearAllContent mocks base method.
func (m *MockJobRunInfo) ClearAllContent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAllContent")
}

// ClearAllContent indicates an expected call of ClearAllContent.
func (mr *MockJobRunInfoMockRecorder) ClearAllContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllContent", reflect.TypeOf((*MockJobRunInfo)(nil).ClearAllContent))
}

// GetCombinedJUnitTestSuites mocks base method.
func (m *MockJobRunInfo) GetCombinedJUnitTestSuites(arg0 context.Context) (*junit.TestSuites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedJUnitTestSuites", arg0)
	ret0, _ := ret[0].(*junit.TestSuites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedJUnitTestSuites indicates an expected call of GetCombinedJUnitTestSuites.
func (mr *MockJobRunInfoMockRecorder) GetCombinedJUnitTestSuites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedJUnitTestSuites", reflect.TypeOf((*MockJobRunInfo)(nil).GetCombinedJUnitTestSuites), arg0)
}

// GetContent mocks base method.
func (m *MockJobRunInfo) GetContent(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockJobRunInfoMockRecorder) GetContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockJobRunInfo)(nil).GetContent), arg0, arg1)
}

// GetGCSArtifactURL mocks base method.
func (m *MockJobRunInfo) GetGCSArtifactURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCSArtifactURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGCSArtifactURL indicates an expected call of GetGCSArtifactURL.
func (mr *MockJobRunInfoMockRecorder) GetGCSArtifactURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCSArtifactURL", reflect.TypeOf((*MockJobRunInfo)(nil).GetGCSArtifactURL))
}

// GetGCSJunitPaths mocks base method.
func (m *MockJobRunInfo) GetGCSJunitPaths() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCSJunitPaths")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGCSJunitPaths indicates an expected call of GetGCSJunitPaths.
func (mr *MockJobRunInfoMockRecorder) GetGCSJunitPaths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCSJunitPaths", reflect.TypeOf((*MockJobRunInfo)(nil).GetGCSJunitPaths))
}

// GetGCSProwJobPath mocks base method.
func (m *MockJobRunInfo) GetGCSProwJobPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCSProwJobPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGCSProwJobPath indicates an expected call of GetGCSProwJobPath.
func (mr *MockJobRunInfoMockRecorder) GetGCSProwJobPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCSProwJobPath", reflect.TypeOf((*MockJobRunInfo)(nil).GetGCSProwJobPath))
}

// GetHumanURL mocks base method.
func (m *MockJobRunInfo) GetHumanURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHumanURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHumanURL indicates an expected call of GetHumanURL.
func (mr *MockJobRunInfoMockRecorder) GetHumanURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHumanURL", reflect.TypeOf((*MockJobRunInfo)(nil).GetHumanURL))
}

// GetJobName mocks base method.
func (m *MockJobRunInfo) GetJobName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJobName indicates an expected call of GetJobName.
func (mr *MockJobRunInfoMockRecorder) GetJobName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobName", reflect.TypeOf((*MockJobRunInfo)(nil).GetJobName))
}

// GetJobRunFromGCS mocks base method.
func (m *MockJobRunInfo) GetJobRunFromGCS(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunFromGCS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJobRunFromGCS indicates an expected call of GetJobRunFromGCS.
func (mr *MockJobRunInfoMockRecorder) GetJobRunFromGCS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunFromGCS", reflect.TypeOf((*MockJobRunInfo)(nil).GetJobRunFromGCS), arg0)
}

// GetJobRunID mocks base method.
func (m *MockJobRunInfo) GetJobRunID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJobRunID indicates an expected call of GetJobRunID.
func (mr *MockJobRunInfoMockRecorder) GetJobRunID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunID", reflect.TypeOf((*MockJobRunInfo)(nil).GetJobRunID))
}

// GetOpenShiftTestsFilesWithPrefix mocks base method.
func (m *MockJobRunInfo) GetOpenShiftTestsFilesWithPrefix(arg0 context.Context, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftTestsFilesWithPrefix", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenShiftTestsFilesWithPrefix indicates an expected call of GetOpenShiftTestsFilesWithPrefix.
func (mr *MockJobRunInfoMockRecorder) GetOpenShiftTestsFilesWithPrefix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftTestsFilesWithPrefix", reflect.TypeOf((*MockJobRunInfo)(nil).GetOpenShiftTestsFilesWithPrefix), arg0, arg1)
}

// GetProwJob mocks base method.
func (m *MockJobRunInfo) GetProwJob(arg0 context.Context) (*v1.ProwJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProwJob", arg0)
	ret0, _ := ret[0].(*v1.ProwJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProwJob indicates an expected call of GetProwJob.
func (mr *MockJobRunInfoMockRecorder) GetProwJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProwJob", reflect.TypeOf((*MockJobRunInfo)(nil).GetProwJob), arg0)
}

// IsFinished mocks base method.
func (m *MockJobRunInfo) IsFinished(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinished", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinished indicates an expected call of IsFinished.
func (mr *MockJobRunInfoMockRecorder) IsFinished(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinished", reflect.TypeOf((*MockJobRunInfo)(nil).IsFinished), arg0)
}

// SetGCSProwJobPath mocks base method.
func (m *MockJobRunInfo) SetGCSProwJobPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGCSProwJobPath", arg0)
}

// SetGCSProwJobPath indicates an expected call of SetGCSProwJobPath.
func (mr *MockJobRunInfoMockRecorder) SetGCSProwJobPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGCSProwJobPath", reflect.TypeOf((*MockJobRunInfo)(nil).SetGCSProwJobPath), arg0)
}

// WriteCache mocks base method.
func (m *MockJobRunInfo) WriteCache(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCache indicates an expected call of WriteCache.
func (mr *MockJobRunInfoMockRecorder) WriteCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCache", reflect.TypeOf((*MockJobRunInfo)(nil).WriteCache), arg0, arg1)
}
